package com.sopra.HRAlfrescoCMISAPI;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.dataformat.xml.XmlMapper;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.zip.ZipEntry;import java.util.zip.ZipOutputStream;import javax.servlet.RequestDispatcher;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.apache.chemistry.opencmis.client.api.CmisObject;import org.apache.chemistry.opencmis.client.api.FileableCmisObject;import org.apache.chemistry.opencmis.client.api.Folder;import org.apache.chemistry.opencmis.client.api.Session;import org.apache.chemistry.opencmis.client.api.Tree;import org.apache.chemistry.opencmis.commons.data.ContentStream;import org.apache.chemistry.opencmis.commons.exceptions.CmisContentAlreadyExistsException;import org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException;import org.junit.Test;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;public class DownloadTest{  public DownloadTest() {}    @Test  public void getSession()  {    Session session = CmisSessionSingleton.getInstance();  }  static int mavaleur = 0;  public void getTreeXml()    throws IOException  {    String root = null;    Session session = CmisSessionSingleton.getInstance();    String path = (root == null) || (root.isEmpty()) ? "/" : root;    Folder folder = CmisHelper.getFolderByPath(session, path, CmisHelper.LIGHT_OPERATION_CONTEXT);    List<Tree<FileableCmisObject>> trees = folder.getDescendants(-1, CmisHelper.LIGHT_OPERATION_CONTEXT);    NodeRepresenter parentNode = GedObjectMapper.mapFileableObject(folder);    for (Tree<FileableCmisObject> tree : trees) {      parentNode.getChildren().add(CmisTreeHelper.getItemsTree(tree));    }        XmlMapper mapper = new XmlMapper();        String xml = mapper.writeValueAsString(parentNode);        mapper.writeValue(new File("target/simple_node_capitalized.xml"), parentNode);        ObjectMapper objectMapper = new ObjectMapper();    objectMapper.writeValue(new File("target/node.json"), parentNode);    String json = objectMapper.writeValueAsString(parentNode);  }  @Test  public void sendFile(String pj, String ext) throws ParserConfigurationException, SAXException, IOException  {    String root = null;    Session session = CmisSessionSingleton.getInstance();    String path = (root == null) || (root.isEmpty()) ? "/" : root;    Folder folder = CmisHelper.getFolderByPath(session, path, CmisHelper.LIGHT_OPERATION_CONTEXT);    List<Tree<FileableCmisObject>> trees = folder.getDescendants(-1, CmisHelper.LIGHT_OPERATION_CONTEXT);    NodeRepresenter parentNode = GedObjectMapper.mapFileableObject(folder);    Folder subFolder = null;    try {      subFolder = (Folder)session.getObjectByPath(folder.getPath() + "/" + "test");      System.out.println("Folder already existed!");    } catch (CmisObjectNotFoundException onfe) {      Map props = new HashMap();      props.put("cmis:objectTypeId", "cmis:folder");      props.put("cmis:name", "test");      subFolder = folder.createFolder(props);      String subFolderId = subFolder.getId();      System.out.println("Created new folder: " + subFolderId);    }         File f = new File("/dv46/param/"+pj+""+ext);       Map props = new HashMap();        String fileName = f.getName();    System.out.println("File: " + fileName);    InputStream stream = new FileInputStream(f);        try    {      if (props == null) {        props = new HashMap();      }            if (props.get("cmis:objectTypeId") == null) {        props.put("cmis:objectTypeId", "cmis:document");      }            if (props.get("cmis:name") == null) {        props.put("cmis:name", fileName);      }      String fileType = null;      ContentStream contentStream = session.getObjectFactory().createContentStream(fileName, f.length(), fileType, new FileInputStream(f));            org.apache.chemistry.opencmis.client.api.Document document = null;      try {        document = subFolder.createDocument(props, contentStream, null);        System.out.println("Created new document: " + document.getId());      } catch (CmisContentAlreadyExistsException ccaee) {        document = (org.apache.chemistry.opencmis.client.api.Document)session.getObjectByPath(folder.getPath() + "/" + fileName);        System.out.println("Document already exists: " + fileName);      }    }    finally {}  }  @Test  public void uploadFile() throws ParserConfigurationException, SAXException, IOException  {    String root = null;    Session session = CmisSessionSingleton.getInstance();    String path = (root == null) || (root.isEmpty()) ? "/" : root;    Folder folder = CmisHelper.getFolderByPath(session, path, CmisHelper.LIGHT_OPERATION_CONTEXT);    List<Tree<FileableCmisObject>> trees = folder.getDescendants(-1, CmisHelper.LIGHT_OPERATION_CONTEXT);    NodeRepresenter parentNode = GedObjectMapper.mapFileableObject(folder);    Folder subFolder = null;    try {      subFolder = (Folder)session.getObjectByPath(folder.getPath() + "/" + "test");      System.out.println("Folder already existed!");    } catch (CmisObjectNotFoundException onfe) {      Map props = new HashMap();      props.put("cmis:objectTypeId", "cmis:folder");      props.put("cmis:name", "test");      subFolder = folder.createFolder(props);      String subFolderId = subFolder.getId();      System.out.println("Created new folder: " + subFolderId);    }        StringBuilder sb = new StringBuilder();    sb.append("Test String");        File f = new File(ParseXMLPOURZIP() + ".zip");        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(f));    for (int i = 0; i < ParseXML().size(); i++) {      ZipEntry e = new ZipEntry("/dv46/param/" + (String)ParseXML().get(i));      out.putNextEntry(e);    }    byte[] data = sb.toString().getBytes();    out.write(data, 0, data.length);    out.closeEntry();        out.close();    Map props = new HashMap();        String fileName = f.getName();    System.out.println("File: " + fileName);    InputStream stream = new FileInputStream(f);        try    {      if (props == null) {        props = new HashMap();      }            if (props.get("cmis:objectTypeId") == null) {        props.put("cmis:objectTypeId", "cmis:document");      }            if (props.get("cmis:name") == null) {        props.put("cmis:name", fileName);      }      String fileType = null;      ContentStream contentStream = session.getObjectFactory().createContentStream(fileName, f.length(), fileType, new FileInputStream(f));            org.apache.chemistry.opencmis.client.api.Document document = null;      try {        document = subFolder.createDocument(props, contentStream, null);        System.out.println("Created new document: " + document.getId());      } catch (CmisContentAlreadyExistsException ccaee) {        document = (org.apache.chemistry.opencmis.client.api.Document)session.getObjectByPath(folder.getPath() + "/" + fileName);        System.out.println("Document already exists: " + fileName);      }    }    finally {}  }    public void getTree() throws Exception  {	   System.out.println("bjr");    String root = null;    Session session = CmisSessionSingleton.getInstance();    String path = (root == null) || (root.isEmpty()) ? "/" : root;    Folder folder = CmisHelper.getFolderByPath(session, path, CmisHelper.LIGHT_OPERATION_CONTEXT);    List<Tree<FileableCmisObject>> trees = folder.getDescendants(-1, CmisHelper.LIGHT_OPERATION_CONTEXT);    NodeRepresenter parentNode = GedObjectMapper.mapFileableObject(folder);    for (Tree<FileableCmisObject> tree : trees) {      parentNode.getChildren().add(CmisTreeHelper.getItemsTree(tree));    }   System.out.println(parentNode.getChildren().get(7).getChildren().size());    //FileOutputStream fos = new FileOutputStream(ParseXMLPOURZIP() + ".zip");    // FileOutputStream fos = new FileOutputStream("D:\\Profiles\\mousassi\\Desktop\\"+"test.zip");      FileOutputStream fos = new FileOutputStream("/dv46/file/" +ParseXMLPOURZIP() + ".zip");    ZipOutputStream zipOut = new ZipOutputStream(fos);    File inputFile = new File("/dv46/archivageArabic/nra/by01/"+FindRepertoire()+"/01_xml_00.xml");       System.out.println("bjr ah bn"); 	ZipEntry c =new ZipEntry(inputFile.getName());		zipOut.putNextEntry(c);    for (int i = 0; i < parentNode.getChildren().get(7).getChildren().size(); i++) {    	System.out.println(ParseXML().size());    	for (int j = 0; j < ParseXML().size(); j++) {    		    System.out.println("i : " +i);//    		    System.out.println("j : " +j);//        	    System.out.println("ili bel j "+parentNode.getChildren().get(7).getChildren().get(j).name);//    		    System.out.println("ili bel i "+parentNode.getChildren().get(7).getChildren().get(i).name);//    		    System.out.println("lista bel j "  +ParseXML().get(j));//    		    System.out.println("lista bel i "  +ParseXML().get(i));   		 if(	parentNode.getChildren().get(7).getChildren().get(i).name.equals(ParseXML().get(j))) {    	  	   			ZipEntry e = new ZipEntry(parentNode.getChildren().get(7).getChildren().get(i).name);   			zipOut.putNextEntry(e);    	      String id = parentNode.getChildren().get(7).getChildren().get(i).id;      String name = parentNode.getChildren().get(7).getChildren().get(i).name;      HashMap<String, Object> result = new HashMap();      ContentStream contentStream = null;      CmisObject object = null;            object = CmisHelper.getCmisObject(session, id, CmisHelper.LIGHT_OPERATION_CONTEXT);      if (object == null) {        throw new Exception("object not found");      }      if (!(object instanceof org.apache.chemistry.opencmis.client.api.Document))        throw new Exception("object is not a document");      org.apache.chemistry.opencmis.client.api.Document document = (org.apache.chemistry.opencmis.client.api.Document)object;      contentStream = document.getContentStream();      if (contentStream == null)        throw new Exception("document ContentStream is null");      InputStream in = contentStream.getStream();      try {        String mimeType = contentStream.getMimeType();        if ((mimeType == null) || (mimeType.length() == 0)) {          mimeType = "application/octet-stream";        }      }      catch (Exception localException) {}            result.put("inputStream", in);      String path1 = object.getName();      File file = new File(path1);      OutputStream out = new FileOutputStream(file);      int size = 0;      int length = 0;      byte[] buffer = new byte[65536];      while ((length = in.read(buffer, 0, buffer.length)) != -1) {        out.write(buffer, 0, length);        size += length;                result.put("fileName", object.getName());        System.out.println("lénna"+object.getName());      }            File fileToZip = new File(path1);      FileInputStream fis = new FileInputStream(fileToZip);    //  ZipEntry zipEntry = new ZipEntry(fileToZip.getName());           // zipOut.putNextEntry(zipEntry);            byte[] bytes = new byte[1024];      length = 0;      while ((length = fis.read(bytes)) >= 0) {            zipOut.write(bytes, 0, length);      }      fis.close();   		 }}    }         	zipOut.closeEntry();    fos.close();  }  public void  Visualiser(String pj, String ext) throws Exception  {	  	    	  pj="fevrier";	  ext=".pdf";	  String root = null;	    Session session = CmisSessionSingleton.getInstance();	    String path = (root == null) || (root.isEmpty()) ? "/" : root;	    Folder folder = CmisHelper.getFolderByPath(session, path, CmisHelper.LIGHT_OPERATION_CONTEXT);	    List<Tree<FileableCmisObject>> trees = folder.getDescendants(-1, CmisHelper.LIGHT_OPERATION_CONTEXT);	    NodeRepresenter parentNode = GedObjectMapper.mapFileableObject(folder);	    for (Tree<FileableCmisObject> tree : trees) {	      parentNode.getChildren().add(CmisTreeHelper.getItemsTree(tree));	    }	   System.out.println(parentNode.getChildren().get(7).getChildren().size());	    //FileOutputStream fos = new FileOutputStream(ParseXMLPOURZIP() + ".zip"); 	 	    for (int i = 0; i < parentNode.getChildren().get(7).getChildren().size(); i++) {//	    		    System.out.println("j : " +j);//	        	    System.out.println("ili bel j "+parentNode.getChildren().get(7).getChildren().get(j).name);//	    		    System.out.println("ili bel i "+parentNode.getChildren().get(7).getChildren().get(i).name);//	    		    System.out.println("lista bel j "  +ParseXML().get(j));//	    		    System.out.println("lista bel i "  +ParseXML().get(i));	   		 if(	parentNode.getChildren().get(7).getChildren().get(i).name.equals(pj+ext)) {	    	  		   		  FileOutputStream fos = new FileOutputStream("/dv46/param/"+ parentNode.getChildren().get(7).getChildren().get(i).name );		   		  //  FileOutputStream fos = new FileOutputStream("d:\\Profiles\\mousassi\\Desktop\\test\\" + parentNode.getChildren().get(7).getChildren().get(i).name); 	   		  fos.flush();	      String id = parentNode.getChildren().get(7).getChildren().get(i).id;	      String name = parentNode.getChildren().get(7).getChildren().get(i).name;	      HashMap<String, Object> result = new HashMap();	      ContentStream contentStream = null;	      CmisObject object = null;	      	      object = CmisHelper.getCmisObject(session, id, CmisHelper.LIGHT_OPERATION_CONTEXT);	      if (object == null) {	        throw new Exception("object not found");	      }	      if (!(object instanceof org.apache.chemistry.opencmis.client.api.Document))	        throw new Exception("object is not a document");	      org.apache.chemistry.opencmis.client.api.Document document = (org.apache.chemistry.opencmis.client.api.Document)object;	      contentStream = document.getContentStream();	      if (contentStream == null)	        throw new Exception("document ContentStream is null");	      InputStream in = contentStream.getStream();	      try {	        String mimeType = contentStream.getMimeType();	        if ((mimeType == null) || (mimeType.length() == 0)) {	          mimeType = "application/octet-stream";	        }	      }	      catch (Exception localException) {}	      	      result.put("inputStream", in);	      String path1 = object.getName();	      File file = new File(path1);	      OutputStream out = new FileOutputStream(file);	      int size = 0;	      int length = 0;	      byte[] buffer = new byte[65536];	      while ((length = in.read(buffer, 0, buffer.length)) != -1) {	        fos.write(buffer, 0, length);	        size += length;	        	        result.put("fileName", object.getName());	        }	        fos.close();	   		 		   		}	   		 }	  }    public void DownloadMultiple() throws Exception {    String root = null;    Session session = CmisSessionSingleton.getInstance();    String path = (root == null) || (root.isEmpty()) ? "/" : root;    Folder folder = CmisHelper.getFolderByPath(session, path, CmisHelper.LIGHT_OPERATION_CONTEXT);    List<Tree<FileableCmisObject>> trees = folder.getDescendants(-1, CmisHelper.LIGHT_OPERATION_CONTEXT);    NodeRepresenter parentNode = GedObjectMapper.mapFileableObject(folder);    for (Tree<FileableCmisObject> tree : trees) {      parentNode.getChildren().add(CmisTreeHelper.getItemsTree(tree));    }        FileOutputStream fos = new FileOutputStream("d:\\Profiles\\mousassi\\Desktop\\test\\" + parentNode.getChildren().get(7).name + ".zip");        ZipOutputStream zipOut = new ZipOutputStream(fos);        for (int i = 0; i < ((NodeRepresenter)parentNode.getChildren().get(7)).getChildren().size(); i++)    {      System.out.println(i);      String id = parentNode.getChildren().get(7).getChildren().get(i).id;            String name = parentNode.getChildren().get(7).getChildren().get(i).name;      HashMap<String, Object> result = new HashMap();      ContentStream contentStream = null;      CmisObject object = null;            object = CmisHelper.getCmisObject(session, id, CmisHelper.LIGHT_OPERATION_CONTEXT);      if (object == null) {        throw new Exception("object not found");      }      if (!(object instanceof org.apache.chemistry.opencmis.client.api.Document))        throw new Exception("object is not a document");      org.apache.chemistry.opencmis.client.api.Document document = (org.apache.chemistry.opencmis.client.api.Document)object;      contentStream = document.getContentStream();      if (contentStream == null)        throw new Exception("document ContentStream is null");      InputStream in = contentStream.getStream();      try {        String mimeType = contentStream.getMimeType();        if ((mimeType == null) || (mimeType.length() == 0)) {          mimeType = "application/octet-stream";        }      }      catch (Exception localException) {}            result.put("inputStream", in);      String path1 = object.getName();      File file = new File(path1);      OutputStream out = new FileOutputStream(file);      int size = 0;      int length = 0;      byte[] buffer = new byte[65536];      while ((length = in.read(buffer, 0, buffer.length)) != -1) {        out.write(buffer, 0, length);        size += length;                result.put("fileName", object.getName());        System.out.println("lénna"+object.getName());      }            File fileToZip = new File(path1);      FileInputStream fis = new FileInputStream(fileToZip);      ZipEntry zipEntry = new ZipEntry(fileToZip.getName());      zipOut.putNextEntry(zipEntry);            byte[] bytes = new byte[6545];      length = 0;      while ((length = fis.read(bytes)) >= 0) {        zipOut.write(bytes, 0, length);      }      fis.close();    }        zipOut.close();    fos.close();    System.out.println("téléchargement terminée avec succès");  }    public static void writeToZipFile(String path, ZipOutputStream zipStream) throws java.io.FileNotFoundException, IOException  {    System.out.println("Writing file : '" + path + "' to zip file");    File aFile = new File(path);    FileInputStream fis = new FileInputStream(aFile);    ZipEntry zipEntry = new ZipEntry(path);    zipStream.putNextEntry(zipEntry);    byte[] bytes = new byte[1024];    int length;    while ((length = fis.read(bytes)) >= 0) {      zipStream.write(bytes, 0, length);    }    zipStream.closeEntry();    fis.close();  }    @Test  public static ArrayList ParseXML() throws ParserConfigurationException, SAXException, IOException {    File inputFile = new File("/dv46/archivageArabic/nra/by01/"+FindRepertoire()+"/01_xml_00.xml"); //  File inputFile = new File("D:\\Profiles\\mousassi\\Desktop\\01_xml_00.xml");       DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();    org.w3c.dom.Document doc = dBuilder.parse(inputFile);    doc.getDocumentElement().normalize();    System.out.println("Root element :" + doc.getDocumentElement().getNodeName());    NodeList nList = doc.getElementsByTagName("Annee");    NodeList nList2 = doc.getElementsByTagName("Mois");    NodeList nList3 = doc.getElementsByTagName("DonneesIndiv");    NodeList nList4 = doc.getElementsByTagName("Etablissement");        ArrayList listedespieces = new ArrayList();    NodeList nList5 = doc.getElementsByTagName("Siret");    NodeList nList6 = doc.getElementsByTagName("PayeIndivMensuel");    NodeList nList7 = doc.getElementsByTagName("PJRef");    NodeList nList8 = doc.getElementsByTagName("IdUnique");    NodeList nList9 = doc.getElementsByTagName("NomPJ");        for (int i = 0; i < nList.getLength(); i++) {      Node nNode = nList.item(i);      Element eElement1 = (Element)nNode;      String annee = eElement1.getAttribute("V");    //  System.out.println("Annee: " + eElement1.getAttribute("V"));      Node nNode2 = nList2.item(i);      Element eElement2 = (Element)nNode2;   //   System.out.println("Mois: " + eElement2.getAttribute("V"));      String mois = eElement2.getAttribute("V");      Node nNode3 = nList3.item(i);      Element eElement3 = (Element)nNode3;                   for (int b=0; b<nList9.getLength(); b++) {        	  Node nNode9 = nList9.item(b);        	  Element eElement9 = (Element)nNode9;        	  System.out.println(nNode9.getNodeName());        	   if (!listedespieces.contains(eElement9.getAttribute("V"))) {                   listedespieces.add(eElement9.getAttribute("V"));                   System.out.println("lol"+listedespieces);                 }        	                           }        }          System.out.println("la liste est : " +listedespieces);    return listedespieces;  }    public static String ParseXMLPOURZIP() throws ParserConfigurationException, SAXException, IOException  {	   // File inputFile = new File("D:\\Profiles\\mousassi\\Desktop\\01_xml_00.xml");	     File inputFile = new File("/dv46/archivageArabic/nra/by01/"+FindRepertoire()+"/01_xml_00.xml");	  //File inputFile = new File("d:\\Profiles\\mousassi\\Desktop\\01_xml_00.xml");  	  DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();    org.w3c.dom.Document doc = dBuilder.parse(inputFile);    doc.getDocumentElement().normalize();    System.out.println("Root element :" + doc.getDocumentElement().getNodeName());    NodeList nList = doc.getElementsByTagName("Annee");    NodeList nList2 = doc.getElementsByTagName("Mois");    String annee = null;    String mois = null;    String siret = null;    ArrayList listedespieces = new ArrayList();    NodeList nList5 = doc.getElementsByTagName("Siret");    NodeList nList6 = doc.getElementsByTagName("PayeIndivMensuel");    NodeList nList7 = doc.getElementsByTagName("PJRef");    NodeList nList8 = doc.getElementsByTagName("IdUnique");    NodeList nList9 = doc.getElementsByTagName("NomPJ");        for (int i = 0; i < nList.getLength(); i++) {      Node nNode = nList.item(i);      Element eElement1 = (Element)nNode;      annee = eElement1.getAttribute("V");      System.out.println("Annee: " + eElement1.getAttribute("V"));      Node nNode2 = nList2.item(i);      Element eElement2 = (Element)nNode2;      System.out.println("Mois: " + eElement2.getAttribute("V"));      mois = eElement2.getAttribute("V");      //      for (int v = 0; v < nList3.getLength(); v++) {//        Node nNode4 = nList4.item(v);//        Element eElement4 = (Element)nNode4;      for (int b=0; b<nList5.getLength(); b++) {        	  Node nNode6 = nList5.item(b);        	  Element eElement6 = (Element)nNode6;        	  System.out.println(nNode6.getParentNode().getNodeName());        	  if( nNode6.getParentNode().getNodeName().equals("Etablissement") ) {          System.out.println("Siret: " + eElement6.getAttribute("V"));          siret = eElement6.getAttribute("V");        }          } }        return siret + "_" + annee + "_PAYE_" + mois;  }  public static int FindRepertoire() { File repertoire = new File("/dv46/archivageArabic/nra/by01/");  String[] liste = repertoire.list();  int[] list = new int[liste.length];    if (liste != null) {    for (int i = 0; i < liste.length; i++) {      list[i] = Integer.parseInt(liste[i]);      if (list[i] > mavaleur) {        mavaleur = list[i];      }          }      } else {    System.err.println("Nom de repertoire invalide");  }  return mavaleur;}}